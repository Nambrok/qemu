xen-hvm: Allocate VRAM in a reserved area

When allocating the VRAM, QEMU allocates it immediately after RAM. This
mostly works fine as there is a gap between the end of RAM and the start
of the MMIO region.  However, for instance when QEMU has 2G and the MMIO
region is 2G, there is no gap and QEMU will allocate the VRAM at 2G which
causes breakage since a BAR may be mapped to the same location.

Force RAM block address for guest memory allocation to always point to
a reserved area in guest address space.

diff --git a/exec.c b/exec.c
index 9a7600e..77ffd7a 100644
--- a/exec.c
+++ b/exec.c
@@ -1901,8 +1901,8 @@ static void ram_block_add(RAMBlock *new_block, Error **errp)
 
     if (!new_block->host) {
         if (xen_enabled()) {
-            xen_ram_alloc(new_block->offset, new_block->max_length,
-                          new_block->mr, &err);
+            new_block->offset = xen_ram_alloc(new_block->offset, new_block->max_length,
+                                              new_block->mr, &err);
             if (err) {
                 error_propagate(errp, err);
                 qemu_mutex_unlock_ramlist();
diff --git a/hw/i386/xen/xen-hvm.c b/hw/i386/xen/xen-hvm.c
index 8c48d83..edc1981 100644
--- a/hw/i386/xen/xen-hvm.c
+++ b/hw/i386/xen/xen-hvm.c
@@ -241,7 +241,7 @@ static void xen_ram_init(PCMachineState *pcms,
     }
 }
 
-void xen_ram_alloc(ram_addr_t ram_addr, ram_addr_t size, MemoryRegion *mr,
+ram_addr_t xen_ram_alloc(ram_addr_t ram_addr, ram_addr_t size, MemoryRegion *mr,
                    Error **errp)
 {
     unsigned long nr_pfn;
@@ -253,13 +253,15 @@ void xen_ram_alloc(ram_addr_t ram_addr, ram_addr_t size, MemoryRegion *mr,
         fprintf(stderr, "%s: do not alloc "RAM_ADDR_FMT
                 " bytes of ram at "RAM_ADDR_FMT" when runstate is INMIGRATE\n",
                 __func__, size, ram_addr); 
-        return;
+        return ram_addr;
     }
 
     if (mr == &ram_memory) {
-        return;
+        return ram_addr;
     }
 
+    ram_addr = VRAM_RESERVED_ADDRESS;
+
     trace_xen_ram_alloc(ram_addr, size);
 
     nr_pfn = size >> TARGET_PAGE_BITS;
@@ -275,6 +277,7 @@ void xen_ram_alloc(ram_addr_t ram_addr, ram_addr_t size, MemoryRegion *mr,
     }
 
     g_free(pfn_list);
+    return ram_addr;
 }
 
 static XenPhysmap *get_physmapping(hwaddr start_addr, ram_addr_t size)
diff --git a/include/hw/xen/xen.h b/include/hw/xen/xen.h
index 4991659..4e85a4d 100644
--- a/include/hw/xen/xen.h
+++ b/include/hw/xen/xen.h
@@ -42,8 +42,8 @@ void xenstore_store_pv_console_info(int i, struct Chardev *chr);
 
 void xen_hvm_init(PCMachineState *pcms, MemoryRegion **ram_memory);
 
-void xen_ram_alloc(ram_addr_t ram_addr, ram_addr_t size,
-                   struct MemoryRegion *mr, Error **errp);
+ram_addr_t xen_ram_alloc(ram_addr_t ram_addr, ram_addr_t size,
+                         struct MemoryRegion *mr, Error **errp);
 void xen_hvm_modified_memory(ram_addr_t start, ram_addr_t length);
 
 void xen_register_framebuffer(struct MemoryRegion *mr);
@@ -51,4 +51,6 @@ void xen_register_framebuffer(struct MemoryRegion *mr);
 void xen_unassigned_access(hwaddr addr, bool is_write, void *val,
                            unsigned size);
 
+#define VRAM_RESERVED_ADDRESS  0xff000000
+
 #endif /* QEMU_HW_XEN_H */
diff --git a/stubs/xen-hvm.c b/stubs/xen-hvm.c
index 9701feb..2dc6bd0 100644
--- a/stubs/xen-hvm.c
+++ b/stubs/xen-hvm.c
@@ -37,9 +37,10 @@ int xen_is_pirq_msi(uint32_t msi_data)
     return 0;
 }
 
-void xen_ram_alloc(ram_addr_t ram_addr, ram_addr_t size, MemoryRegion *mr,
+ram_addr_t xen_ram_alloc(ram_addr_t ram_addr, ram_addr_t size, MemoryRegion *mr,
                    Error **errp)
 {
+    return 0;
 }
 
 qemu_irq *xen_interrupt_controller_init(void)
