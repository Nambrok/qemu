From 1c4e074b93b1b0d51885557b6e12d6b8f5f823c6 Mon Sep 17 00:00:00 2001
From: "ben.sims@citrix.com" <ben.sims@citrix.com>
Date: Tue, 31 Mar 2020 08:38:15 +0000
Subject: [PATCH] CP-33348 - Allow media replace qmp command to take a numeric
 socket fds for nbd.

---
 block/nbd.c         | 39 +++++++++++----------------------------
 util/qemu-sockets.c | 24 +++++++++++++++++++-----
 2 files changed, 30 insertions(+), 33 deletions(-)

diff --git a/block/nbd.c b/block/nbd.c
index a50d24b50a..e77cf34605 100644
--- a/block/nbd.c
+++ b/block/nbd.c
@@ -192,10 +192,13 @@ static void nbd_parse_filename(const char *filename, QDict *options,
         goto out;
     }
 
-    /* are we a UNIX or TCP socket? */
+    qdict_put_str(options, "server.uri", host_spec);
+    /* are we a UNIX or TCP socket, or a preopened socket? */
     if (strstart(host_spec, "unix:", &unixpath)) {
         qdict_put_str(options, "server.type", "unix");
         qdict_put_str(options, "server.path", unixpath);
+    } else if (strstart(host_spec, "fd:", &unixpath)) {
+        qdict_put_str(options, "server.type", "fd");
     } else {
         InetSocketAddress *addr = g_new(InetSocketAddress, 1);
 
@@ -262,40 +265,20 @@ static SocketAddress *nbd_config(BDRVNBDState *s, QDict *options,
 {
     SocketAddress *saddr = NULL;
     QDict *addr = NULL;
-    QObject *crumpled_addr = NULL;
-    Visitor *iv = NULL;
-    Error *local_err = NULL;
-
+    const char *uri;
+    /* 
+     * Important to drain the QDict options as block.c checks to see
+     * if it is empty on return.
+     */
     qdict_extract_subqdict(options, &addr, "server.");
     if (!qdict_size(addr)) {
         error_setg(errp, "NBD server address missing");
         goto done;
     }
-
-    crumpled_addr = qdict_crumple(addr, errp);
-    if (!crumpled_addr) {
-        goto done;
-    }
-
-    /*
-     * FIXME .numeric, .to, .ipv4 or .ipv6 don't work with -drive
-     * server.type=inet.  .to doesn't matter, it's ignored anyway.
-     * That's because when @options come from -blockdev or
-     * blockdev_add, members are typed according to the QAPI schema,
-     * but when they come from -drive, they're all QString.  The
-     * visitor expects the former.
-     */
-    iv = qobject_input_visitor_new(crumpled_addr);
-    visit_type_SocketAddress(iv, NULL, &saddr, &local_err);
-    if (local_err) {
-        error_propagate(errp, local_err);
-        goto done;
-    }
-
+    uri = qdict_get_str(addr, "uri");
+    saddr = socket_parse(uri, errp);
 done:
     QDECREF(addr);
-    qobject_decref(crumpled_addr);
-    visit_free(iv);
     return saddr;
 }
 
diff --git a/util/qemu-sockets.c b/util/qemu-sockets.c
index dfeff50cd5..52f704e876 100644
--- a/util/qemu-sockets.c
+++ b/util/qemu-sockets.c
@@ -1042,14 +1042,22 @@ fail:
     return NULL;
 }
 
+static int get_fd_from_fdset(const char *fdstr)
+{
+    int64_t fdset_id = qemu_parse_fd(fdstr);
+    return (fdset_id == -1 ?
+            -1 : monitor_fdset_get_fd(fdset_id, O_RDWR));
+}
+
 static int socket_get_fd(const char *fdstr, Error **errp)
 {
-    int fd;
+    int fd = -1;
     if (cur_mon) {
-        fd = monitor_get_fd(cur_mon, fdstr, errp);
-        if (fd < 0) {
-            return -1;
-        }
+        /* 
+         * Don't create error object if search fails
+         * as we fall back to look in the fdset
+         */
+        fd = monitor_get_fd(cur_mon, fdstr, NULL);
     } else {
         if (qemu_strtoi(fdstr, NULL, 10, &fd) < 0) {
             error_setg_errno(errp, errno,
@@ -1058,6 +1066,12 @@ static int socket_get_fd(const char *fdstr, Error **errp)
             return -1;
         }
     }
+
+    /* fd may have been added to the fdset */
+    if ((fd < 0) && ((fd = get_fd_from_fdset(fdstr)) < 0)) {
+        error_setg(errp, "Socket fd '%s' not found in monitor or fdset.", fdstr);
+        return -1;
+    }
     if (!fd_is_socket(fd)) {
         error_setg(errp, "File descriptor '%s' is not a socket", fdstr);
         close(fd);
-- 
2.17.1

